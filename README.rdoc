= ZfUserManager

Offre un'interfaccia grafica per la gestione utenti di ZapFlow

== Setup

* Aggiungere come dipendenza al gemfile: gem 'zf_user_manager', :git => 'git@github.com:intersailengineering/zf_user_manager.git', :branch => 'staging'
* Aggiungere come dipendenze al gemfile anche le dipendenze a gemme private di zf_user_manager (problema di gemfile e che non supporta sintassi ssh):
    * gem 'zf_client', :git => 'https://github.com/intersailengineering/zf-client.git', :branch => 'staging'
    * gem 'intersail_auth', :git => 'git@github.com:intersailengineering/intersail_auth.git', :branch => 'staging'
* Eseguire bundle install
* Settare le root route in routes.rb:  root to: "home#index"
* Installare e settare le migrations: rake intersail_auth:install:migrations && rake db:migrate
* Aggiungere le rotte dell'engine   mount ZfUserManager::Engine => '/'
* Creare un layout di nome application_zum che contiene 'yield', in esso sarà renderizzato l'user manager
  * All'interno dell'assets pipeline di tale layout è necessario includere rispettivamente i js e css di zf_user_manager/application:
     * in application.js: //= require zf_user_manager/application
     * in application.scss: @import "zf_user_manager/application";
  Si può anche usare un layout customizzato in tal caso bisogna sovrascrivere il layout da utilizzare nel controller application.rb tramite il metodo layout "nuovo_layout"
* Creare un layout application_auth che rispetta i requisiti per il form di autenticazione descritti nel readme di: https://github.com/intersailengineering/intersail_auth

== Ambiente di test

Per eseguire i test manuali nell'ambiente di test è necessario usare l'applicazione dummy presente
all'interno della cartella test/dummy.
Per avviare il server di rails quindi andare nella folder test/dummy ed eseguire rails s.
login: username: admin, password: 123 (verificare in caso non vada la password di admin sul server di login associato ad intersail_auth)

== Sovvrascrivere Classi e controller

Creare una cartella app/decorators ogni file che matcha *_decorator*.rb sarà caricato, in questo modo è possibile
sovvrascrivere metodi di classi e controller, per esempio:

    module Intersail
      module ZfUserManager
          ApplicationController.class_eval do
            helper_method :menu_name, :submenu_name

            def menu_name
              "layouts/menu/empty"
            end

            def submenu_name
              "layouts/nav/under_top/empty"
            end
          end
      end
    end

== File di configurazione ed initializers

Questo engine non utilizza initializer.